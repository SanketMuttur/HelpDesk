classDiagram
    %% Model Classes
    class User {
        -Long id
        -String username
        -String email
        -String password
        -String firstName
        -String lastName
        -boolean enabled
        -boolean locked
        -Date createdAt
        -Date updatedAt
        -Set~Role~ roles
        +getId() Long
        +getUsername() String
        +getEmail() String
        +getPassword() String
        +getFirstName() String
        +getLastName() String
        +isEnabled() boolean
        +isLocked() boolean
        +getCreatedAt() Date
        +getUpdatedAt() Date
        +getRoles() Set~Role~
        +setId(Long)
        +setUsername(String)
        +setEmail(String)
        +setPassword(String)
        +setFirstName(String)
        +setLastName(String)
        +setEnabled(boolean)
        +setLocked(boolean)
        +setCreatedAt(Date)
        +setUpdatedAt(Date)
        +setRoles(Set~Role~)
    }

    class Role {
        -Long id
        -String name
        +getId() Long
        +getName() String
        +setId(Long)
        +setName(String)
    }

    class Post {
        -Long id
        -String title
        -String content
        -Date createdAt
        -Date updatedAt
        -boolean hidden
        -User author
        -Category category
        -Set~String~ tags
        -List~Comment~ comments
        +getId() Long
        +getTitle() String
        +getContent() String
        +getCreatedAt() Date
        +getUpdatedAt() Date
        +isHidden() boolean
        +getAuthor() User
        +getCategory() Category
        +getTags() Set~String~
        +getComments() List~Comment~
        +setId(Long)
        +setTitle(String)
        +setContent(String)
        +setCreatedAt(Date)
        +setUpdatedAt(Date)
        +setHidden(boolean)
        +setAuthor(User)
        +setCategory(Category)
        +setTags(Set~String~)
        +setComments(List~Comment~)
    }

    class Comment {
        -Long id
        -String content
        -Date createdAt
        -Date updatedAt
        -boolean hidden
        -User author
        -Post post
        -Comment parentComment
        -List~Comment~ replies
        +getId() Long
        +getContent() String
        +getCreatedAt() Date
        +getUpdatedAt() Date
        +isHidden() boolean
        +getAuthor() User
        +getPost() Post
        +getParentComment() Comment
        +getReplies() List~Comment~
        +setId(Long)
        +setContent(String)
        +setCreatedAt(Date)
        +setUpdatedAt(Date)
        +setHidden(boolean)
        +setAuthor(User)
        +setPost(Post)
        +setParentComment(Comment)
        +setReplies(List~Comment~)
    }

    class Category {
        -Long id
        -String name
        -String description
        -List~Post~ posts
        +getId() Long
        +getName() String
        +getDescription() String
        +getPosts() List~Post~
        +setId(Long)
        +setName(String)
        +setDescription(String)
        +setPosts(List~Post~)
    }

    class Vote {
        -Long id
        -boolean upvote
        -User user
        -Post post
        -Comment comment
        +getId() Long
        +isUpvote() boolean
        +getUser() User
        +getPost() Post
        +getComment() Comment
        +setId(Long)
        +setUpvote(boolean)
        +setUser(User)
        +setPost(Post)
        +setComment(Comment)
    }

    class Report {
        -Long id
        -String reason
        -Date createdAt
        -boolean resolved
        -User reporter
        -Post post
        -Comment comment
        +getId() Long
        +getReason() String
        +getCreatedAt() Date
        +isResolved() boolean
        +getReporter() User
        +getPost() Post
        +getComment() Comment
        +setId(Long)
        +setReason(String)
        +setCreatedAt(Date)
        +setResolved(boolean)
        +setReporter(User)
        +setPost(Post)
        +setComment(Comment)
    }

    %% Repository Interfaces
    class UserRepository {
        <<interface>>
        +findByEmail(String) User
        +findByUsername(String) User
        +existsByEmail(String) boolean
        +existsByUsername(String) boolean
    }

    class RoleRepository {
        <<interface>>
        +findByName(String) Optional~Role~
    }

    class PostRepository {
        <<interface>>
        +findByAuthor(User) List~Post~
        +findByCategory(Category) List~Post~
        +searchPosts(String) List~Post~
        +findByTag(String) List~Post~
        +findByAuthorAndHiddenFalse(User) List~Post~
        +findByCategoryAndHiddenFalse(Category) List~Post~
        +findByTagAndHiddenFalse(String) List~Post~
        +searchVisiblePosts(String) List~Post~
    }

    class CommentRepository {
        <<interface>>
        +findByPostOrderByCreatedAtAsc(Post) List~Comment~
        +findTopLevelCommentsByPostId(Long) List~Comment~
        +findByParentCommentOrderByCreatedAtAsc(Comment) List~Comment~
        +findByAuthor(User) List~Comment~
        +findByAuthorAndHiddenFalse(User) List~Comment~
    }

    class CategoryRepository {
        <<interface>>
        +findByName(String) Category
        +existsByName(String) boolean
    }

    class VoteRepository {
        <<interface>>
        +findByUserAndPost(User, Post) Optional~Vote~
        +findByUserAndComment(User, Comment) Optional~Vote~
        +countByPostAndUpvote(Post, boolean) int
        +countByCommentAndUpvote(Comment, boolean) int
    }

    class ReportRepository {
        <<interface>>
        +findByPost(Post) List~Report~
        +findByComment(Comment) List~Report~
        +findByReporter(User) List~Report~
        +findByResolved(boolean) List~Report~
    }

    %% DTOs
    class UserDto {
        -Long id
        -String username
        -String email
        -String password
        -String firstName
        -String lastName
    }

    class UserProfileDto {
        -Long id
        -String firstName
        -String lastName
        -String username
        -String email
    }

    class PostDto {
        -Long id
        -String title
        -String content
        -Date createdAt
        -Date updatedAt
        -boolean hidden
        -String authorUsername
        -Long categoryId
        -String categoryName
        -Set~String~ tags
        -int upvotes
        -int downvotes
    }

    class CommentDto {
        -Long id
        -String content
        -Date createdAt
        -Date updatedAt
        -boolean hidden
        -String authorUsername
        -Long postId
        -Long parentCommentId
        -List~CommentDto~ replies
        -int upvotes
        -int downvotes
    }

    class CategoryDto {
        -Long id
        -String name
        -String description
    }

    class VoteDto {
        -Long id
        -boolean upvote
        -Long userId
        -Long postId
        -Long commentId
    }

    class ReportDto {
        -Long id
        -String reason
        -Date createdAt
        -boolean resolved
        -String reporterUsername
        -Long postId
        -Long commentId
    }

    %% Service Interfaces
    class UserService {
        <<interface>>
        +findByUsername(String) UserDto
        +findById(Long) UserDto
        +registerUser(UserDto) UserDto
        +updateProfile(UserProfileDto) UserProfileDto
        +changePassword(String, String, String) boolean
        +suspendUser(Long) boolean
        +banUser(Long) boolean
        +unsuspendUser(Long) boolean
        +unbanUser(Long) boolean
        +changeRole(Long, String) boolean
    }

    class PostService {
        <<interface>>
        +findById(Long) PostDto
        +findAll() List~PostDto~
        +findByAuthor(String) List~PostDto~
        +findByCategory(Long) List~PostDto~
        +findByTag(String) List~PostDto~
        +searchPosts(String) List~PostDto~
        +createPost(PostDto, String) PostDto
        +updatePost(PostDto, String) PostDto
        +deletePost(Long, String) boolean
        +hidePost(Long) boolean
        +unhidePost(Long) boolean
    }

    class CommentService {
        <<interface>>
        +findById(Long) CommentDto
        +findByPost(Long) List~CommentDto~
        +findTopLevelCommentsByPost(Long) List~CommentDto~
        +findRepliesByComment(Long) List~CommentDto~
        +createComment(CommentDto, String) CommentDto
        +updateComment(CommentDto, String) CommentDto
        +deleteComment(Long, String) boolean
        +hideComment(Long) boolean
        +unhideComment(Long) boolean
    }

    class CategoryService {
        <<interface>>
        +findById(Long) CategoryDto
        +findAll() List~CategoryDto~
        +findByName(String) CategoryDto
        +createCategory(CategoryDto) CategoryDto
        +updateCategory(CategoryDto) CategoryDto
        +deleteCategory(Long) boolean
    }

    class VoteService {
        <<interface>>
        +votePost(Long, boolean, String) VoteDto
        +voteComment(Long, boolean, String) VoteDto
        +getPostVotes(Long) Map~String, Integer~
        +getCommentVotes(Long) Map~String, Integer~
    }

    class ReportService {
        <<interface>>
        +findById(Long) ReportDto
        +findAll() List~ReportDto~
        +findByPost(Long) List~ReportDto~
        +findByComment(Long) List~ReportDto~
        +findByReporter(String) List~ReportDto~
        +findByResolved(boolean) List~ReportDto~
        +createReport(ReportDto, String) ReportDto
        +resolveReport(Long) boolean
    }

    %% Controllers
    class AuthController {
        -UserService userService
        +showRegistrationForm() String
        +register(UserDto, BindingResult, Model) String
        +showLoginForm() String
    }

    class UserController {
        -UserService userService
        +showProfile(Model, Principal) String
        +updateProfile(UserProfileDto, RedirectAttributes) String
    }

    class DashboardController {
        +dashboard() String
    }

    class PostController {
        -PostService postService
        -CategoryService categoryService
        -CommentService commentService
        +showAllPosts(Model) String
        +showPost(Long, Model, Principal) String
        +showCreateForm(Model) String
        +createPost(PostDto, Principal, RedirectAttributes) String
        +showEditForm(Long, Model, Principal) String
        +updatePost(PostDto, Principal, RedirectAttributes) String
        +deletePost(Long, Principal, RedirectAttributes) String
        +searchPosts(String, Model) String
        +showPostsByCategory(Long, Model) String
        +showPostsByTag(String, Model) String
    }

    class CommentController {
        -CommentService commentService
        +createComment(CommentDto, Principal, RedirectAttributes) String
        +replyToComment(CommentDto, Principal, RedirectAttributes) String
        +updateComment(CommentDto, Principal, RedirectAttributes) String
        +deleteComment(Long, Principal, RedirectAttributes) String
    }

    class CategoryController {
        -CategoryService categoryService
        +showAllCategories(Model) String
        +showCreateForm(Model) String
        +createCategory(CategoryDto, RedirectAttributes) String
        +showEditForm(Long, Model) String
        +updateCategory(CategoryDto, RedirectAttributes) String
        +deleteCategory(Long, RedirectAttributes) String
    }

    class VoteController {
        -VoteService voteService
        +votePost(Long, boolean, Principal, RedirectAttributes) String
        +voteComment(Long, boolean, Principal, RedirectAttributes) String
    }

    class ReportController {
        -ReportService reportService
        +showReportForm(Long, Long, Model) String
        +createReport(ReportDto, Principal, RedirectAttributes) String
    }

    class AdminController {
        -UserService userService
        -PostService postService
        -CommentService commentService
        -CategoryService categoryService
        -ReportService reportService
        +showDashboard(Model) String
        +showUsers(Model) String
        +viewUser(Long, Model) String
        +suspendUser(Long, RedirectAttributes) String
        +banUser(Long, RedirectAttributes) String
        +unsuspendUser(Long, RedirectAttributes) String
        +unbanUser(Long, RedirectAttributes) String
        +changeRole(Long, String, RedirectAttributes) String
        +showPosts(Model) String
        +viewPost(Long, Model) String
        +hidePost(Long, RedirectAttributes) String
        +unhidePost(Long, RedirectAttributes) String
        +deletePost(Long, RedirectAttributes) String
        +showComments(Model) String
        +viewComment(Long, Model) String
        +hideComment(Long, RedirectAttributes) String
        +unhideComment(Long, RedirectAttributes) String
        +deleteComment(Long, RedirectAttributes) String
        +showReports(Model) String
        +viewReport(Long, Model) String
        +resolveReport(Long, RedirectAttributes) String
    }

    %% Relationships - Model
    User "1" -- "many" Role : has
    User "1" -- "many" Post : authors
    User "1" -- "many" Comment : authors
    User "1" -- "many" Vote : casts
    User "1" -- "many" Report : reports
    
    Post "many" -- "1" Category : belongs to
    Post "1" -- "many" Comment : has
    Post "1" -- "many" Vote : receives
    Post "1" -- "many" Report : receives
    
    Comment "many" -- "1" Post : belongs to
    Comment "1" -- "many" Comment : has replies
    Comment "1" -- "many" Vote : receives
    Comment "1" -- "many" Report : receives
    
    %% Relationships - Repository to Model
    UserRepository -- User : manages
    RoleRepository -- Role : manages
    PostRepository -- Post : manages
    CommentRepository -- Comment : manages
    CategoryRepository -- Category : manages
    VoteRepository -- Vote : manages
    ReportRepository -- Report : manages
    
    %% Relationships - Service to Repository
    UserService -- UserRepository : uses
    UserService -- RoleRepository : uses
    PostService -- PostRepository : uses
    PostService -- UserRepository : uses
    PostService -- CategoryRepository : uses
    CommentService -- CommentRepository : uses
    CommentService -- PostRepository : uses
    CommentService -- UserRepository : uses
    CategoryService -- CategoryRepository : uses
    VoteService -- VoteRepository : uses
    VoteService -- PostRepository : uses
    VoteService -- CommentRepository : uses
    VoteService -- UserRepository : uses
    ReportService -- ReportRepository : uses
    ReportService -- PostRepository : uses
    ReportService -- CommentRepository : uses
    ReportService -- UserRepository : uses
    
    %% Relationships - Controller to Service
    AuthController -- UserService : uses
    UserController -- UserService : uses
    PostController -- PostService : uses
    PostController -- CategoryService : uses
    PostController -- CommentService : uses
    CommentController -- CommentService : uses
    CategoryController -- CategoryService : uses
    VoteController -- VoteService : uses
    ReportController -- ReportService : uses
    AdminController -- UserService : uses
    AdminController -- PostService : uses
    AdminController -- CommentService : uses
    AdminController -- CategoryService : uses
    AdminController -- ReportService : uses